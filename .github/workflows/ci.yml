name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test PowerShell ${{ matrix.psversion }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        psversion: ['5.1', '7.2', '7.3', '7.4']
        exclude:
          - os: ubuntu-latest
            psversion: '5.1'
          - os: macOS-latest
            psversion: '5.1'

    steps:
    - uses: actions/checkout@v2

    # Rely on GitHub-hosted runners' built-in PowerShell; remove Setup PowerShell step
    - name: Verify PowerShell Version
      shell: pwsh
      run: |
        $PSVersionTable.PSVersion

    - name: Install PSScriptAnalyzer
      shell: pwsh
      run: |
        Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck

    - name: Install Pester
      shell: pwsh
      run: |
        Install-Module -Name Pester -MinimumVersion 5.0.0 -Force -SkipPublisherCheck
        Import-Module Pester -MinimumVersion 5.0.0 -Force

    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        $results = Invoke-ScriptAnalyzer -Path . -Recurse -Severity Error
        if ($results.Count -gt 0) {
            $results | Format-Table -AutoSize
            throw "PSScriptAnalyzer found errors"
        }

    - name: Run Tests
      shell: pwsh
      run: |
        Import-Module Pester -MinimumVersion 5.0.0 -Force
        $config = New-PesterConfiguration
        $config.Run.Path = "./tests"
        $config.Run.Exit = $true
        $config.TestResult.Enabled = $true
        $config.Output.Verbosity = 'Detailed'
        Invoke-Pester -Configuration $config
        if ($LASTEXITCODE -ne 0) {
            throw "Pester tests failed with exit code: $LASTEXITCODE"
        }

    - name: Validate Module Structure
      shell: pwsh
      run: |
        ./build/Test-ModuleStructure.ps1 -Verbose

    - name: Test Module Import
      shell: pwsh
      run: |
        Import-Module ./spun.psd1 -Force -Verbose

    - name: Generate Shasum
      shell: pwsh
      run: |
        $hash = Get-FileHash -Path "./spun.psd1" -Algorithm SHA256
        $hash | Format-List | Out-File -FilePath shasum.txt
        Write-Host "SHA256 of spun.psd1:"
        Get-Content -Path shasum.txt
